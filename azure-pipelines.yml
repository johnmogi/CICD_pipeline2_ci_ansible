trigger:
  batch: true
  branches:
    include:
      - main
      - feature/*
pool:
  name: ubuntu
  vmImage: "terraformAgent"

stages:
# Continuous Integration Process
- stage: CI
  jobs:
        - deployment: staging
          displayName: Deploy to Staging
          variables:
          - group: staging
          environment:
            name:  'staging' 
            resourceType: VirtualMachine
            tags: 'staging'
          strategy:
          # default deployment strategy
            runOnce:
              deploy:
                steps:
#                - template: ci.yml
                    - script: |
                        echo '''
                          PORT: $(PORT)
                          HOST: $(HOST)
                          HOST_URL: $(HOST_URL)
                          COOKIE_ENCRYPT_PWD: $(COOKIE_ENCRYPT_PWD)
                          NODE_ENV: $(NODE_ENV)
                          OKTA_ORG_URL: $(OKTA_ORG_URL)
                          OKTA_CLIENT_ID: $(OKTA_CLIENT_ID)
                          OKTA_CLIENT_SECRET: $(OKTA_CLIENT_SECRET)
                          PGHOST: $(PGHOST)
                          PGUSERNAME: $(PGUSERNAME)
                          PGDATABASE: $(PGDATABASE)
                          PGPASSWORD: $(PGPASSWORD)
                          PGPORT: $(PGPORT)
                          ''' > psecret.yml

                           - task: CopyFiles@2
                            inputs:
                              SourceFolder: "$(Build.SourcesDirectory)"
                              Contents: "**/**"
                              TargetFolder: "$(build.artifactstagingdirectory)"
                            displayName: "prepare artifacts"

                          - task: ArchiveFiles@2
                            inputs:
                              rootFolderOrFile: "$(Build.BinariesDirectory)"
                              includeRootFolder: true
                              archiveType: "tar"
                              archiveFile: "$(Build.ArtifactStagingDirectory)/artifact_ci.tar"
                              replaceExistingArchive: true

                          - task: PublishPipelineArtifact@1
                            inputs:
                              #  targetPath: '$(Pipeline.Workspace)'
                              targetPath: "$(Build.ArtifactStagingDirectory)/artifact_ci.tar"
                              artifact: "arti$(Build.BuildId)"
                              publishLocation: "pipeline"

                          - task: UniversalPackages@0
                            inputs:
                              command: "publish"
                              publishDirectory: "$(Build.ArtifactStagingDirectory)"
                              feedsToUsePublish: "internal"
                              vstsFeedPublish: "f3be00d4-d77a-40e2-a0a4-997840fa8608"
                              vstsFeedPackagePublish: "arti"
                              versionOption: "patch"

                          - task: ExtractFiles@1
                            inputs:
                              archiveFilePatterns: "../**/*.tar"
                              destinationFolder: "ansible"
                              cleanDestinationFolder: true
                              overwriteExistingFiles: false

                          - script: mkdir -p ~/ansible/
                            displayName: Make directory app to ansible files directory
                            - checkout: self
                            displayName: Download ansible files

                          - script: cp -R $(System.DefaultWorkingDirectory)/. ~/ansible/
                            displayName: Copy ansible files

# Continuous Delivery Process
- stage: Deploy_to_Production
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
        - deployment: production
          displayName: Deploy to Production
          variables:
          - group: Production
          environment:
            name:  'Production' #ApprovalRequired
            resourceType: VirtualMachine
            tags: 'Production'
          strategy:
          # default deployment strategy
            runOnce:
              deploy:
                steps:
                - template: cd.yml
